#include <stdio.h>
#include <stdlib.h>
struct node
{
	int data;
	struct node* next;
};
typedef struct node* NODE;
NODE insertEnd(NODE first, int data)
{
	NODE temp = (NODE)malloc(sizeof(struct
	                                node));
	temp -> data = data;
	temp -> next = temp;
	if(first == NULL)
	{
		return temp;
	}
	else
	{
		NODE last = first;
		while(last -> next != first)
		{
			last = last -> next;
		}
		last -> next = temp;
		temp -> next = first;
		return first;
	}
}
void displayList(NODE first)
{
	if(first == NULL)
	{
		printf("Circular Linked List is
		       empty\n");
		       return;
	}
	NODE temp = first;
	do
	{
		printf("%d ", temp -> data);
		temp = temp -> next;
	} while(temp != first);
	printf("\n");
}
NODE concatenateLists(NODE l1, NODE l2)
{
	if(l1 == NULL || l2 == NULL)
	{
		printf("Nothing to concatenate\n");
		return l1;
	}
	NODE t1 = l1;
	while(t1 -> next != l1)
	{
		t1 = t1 -> next;
	}
	NODE t2 = l2;
	while(t2 -> next != l2)
	{
		t2 = t2 -> next;
	}
	t1 -> next = l2;
	t2 -> next = l1;
	printf("Lists concatenated.\n");
	return l1;
}
int main() {
	NODE head1 = NULL, head2 = NULL;
	int choice, data;
	do {
		printf("1. Create Circular Linked
		       List 1\n");
		       printf("2. Create Circular Linked
		              List 2\n");
		              printf("3. Display Circular Linked
		                     List 1\n");
		                     printf("4. Display Circular Linked
		                            List 2\n");
		                            printf("5. Concatenate Lists\n");
		                            printf("6. Exit\n");
		                            printf("Enter your choice: ");
		                            scanf("%d", &choice);
		switch (choice) {
	case 1:
		printf("Enter data to
		       insert into List 1 (-1 to stop): ");
		       scanf("%d", &data);
		while (data != -1) {
			head1 =
			    insertEnd(head1, data);
				scanf("%d", &data);
			}
			break;
		case 2:
				printf("Enter data to
				       insert into List 2 (-1 to stop): ");
				       scanf("%d", &data);
				while (data != -1) {
				head2 =
				    insertEnd(head2, data);
					scanf("%d", &data);
				}
			break;
		case 3:
				printf("Circular Linked
				       List 1: ");
				       displayList(head1);
				       break;
			       case 4:
					       printf("Circular Linked
					              List 2: ");
					              displayList(head2);
					              break;
				              case 5:
						              head1 =
						                  concatenateLists(head1, head2);
						              break;
					              case 6:
							              printf("Exiting\n");
							              break;
						              default:
								              printf("Invalid choice\n");
							}
	} while (choice != 6);

  return 0;
}
