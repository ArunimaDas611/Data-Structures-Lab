#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node* next;
};
typedef struct node* NODE;
NODE createNodeInCLL()
{
	NODE temp = (NODE)malloc(sizeof(struct
	                                node*));
	temp -> next = NULL;
	return temp;
}
NODE insertAtPositionInCLL(NODE first, int
                           pos, int x)
{
	NODE temp, last = first;
	temp = createNodeInCLL();
	temp -> data = x;
	if(first == NULL)
	{
		if(pos == 1)
		{
			temp -> next = temp;
			return temp;
		}
		else
		{
			printf("Position not found\n");
			free(temp);
			return first;
		}
	}
	int count = 0;
	NODE temp2 = first;
	do
	{
		count++;
		temp2 = temp2 -> next;
	} while(temp2 != first);
	if(pos < 1 || pos >(count+1))
	{
		printf("Position not found\n");
		free(temp);
		return first;
	}
	if(pos == 1)
	{
		while(last -> next != first)
		{
			last = last -> next;
		}
		temp -> next = first;
		last -> next = temp;
		return temp;
	}
	temp2 = first;
	for(int i = 1; i < (pos - 1); i++)
	{
		temp2 = temp2 -> next;
	}
	temp -> next = temp2 -> next;
	temp2 -> next = temp;
	return first;
}
NODE deleteAtPositionInCLL(NODE first, int
                           pos)
{
	if(first == NULL)
	{
		printf("CLL is empty\n");
		return first;
	}
	int count = 0;
	NODE temp2 = first;
	do
	{
		count++;
		temp2 = temp2 -> next;
	} while(temp2 != first);
	if(pos < 1 || pos > count)
	{
		printf("Position not found\n");
		return first;
	}
	if(pos == 1)
	{
		if(first -> next == first)
		{
			printf("Deleted element: %d\n",
			       first -> data);
			free(first);
			return NULL;
		}
		NODE last = first;
		while(last -> next != first)
		{
			last = last -> next;
		}
		temp2 = first;
		first = first -> next;
		last -> next = first;
		printf("Deleted element: %d\n",
		       temp2 -> data);
		free(temp2);
		return first;
	}
NODE deleteAtPositionInCLL(NODE first, int
                           pos)
{
	if(first == NULL)
	{
		printf("CLL is empty\n");
		return first;
	}
	int count = 0;
	NODE temp2 = first;
	do
	{
		count++;
		temp2 = temp2 -> next;
	} while(temp2 != first);
	if(pos < 1 || pos > count)
	{
		printf("Position not found\n");
		return first;
	}
	if(pos == 1)
	{
		if(first -> next == first)
		{
			printf("Deleted element: %d\n",
			       first -> data);
			free(first);
			return NULL;
		}
		NODE last = first;
		while(last -> next != first)
		{
			last = last -> next;
		}
		temp2 = first;
		first = first -> next;
		last -> next = first;
		printf("Deleted element: %d\n",
		       temp2 -> data);
		free(temp2);
		return first;
	}
	NODE prev = first;
	for(int i = 1; i < (pos - 1); i++)
	{
		prev = prev -> next;
	}
	NODE temp = prev -> next;
	prev -> next = temp -> next;
	printf("Deleted element: %d\n", temp ->
	       data);
	free(temp);
	return first;
}
void traverseListInCLL(NODE first)
{
	NODE temp = first;
	do
	{
		printf("%d --> ", temp -> data);
		temp = temp -> next;
	} while(temp != first);
	printf("\n");
}
NODE reverseCLL(NODE first)
{
	if(first == NULL || first -> next ==
	        first)
	{
		return first;
	}
	NODE last = first;
	while(last -> next != first)
	{
		last = last -> next;
	}
	last -> next = NULL;
	NODE prev = NULL, current = first, next
	                            = NULL;
	while(current != NULL)
	{
		next = current -> next;
		current -> next = prev;
		prev = current;
		current = next;
	}
	first = prev;
	last = prev;
	while(last -> next != NULL)
	{
		last = last -> next;
	}
	last -> next = first;
	return first;
}
void main() {
	NODE first = NULL;
	int x, pos, op;
	while (1) {
		printf("1.Insert 2.Delete 3.Display
		       4.Reverse 5.Exit\n");
		       printf("choice: ");
		       scanf("%d", &op);
		switch (op) {
	case 1:
		printf("Position: ");
			scanf("%d", &pos);
			if (pos <= 0) {
				printf("Position not
				       found\n");
			} else {
				printf("Element: ");
				scanf("%d", &x);
				first =
				    insertAtPositionInCLL(first, pos, x);
			}
			break;
		case 2:
			if (first == NULL) {
				printf("CLL is
				       empty\n");
			} else {
				printf("Position: ");
				scanf("%d", &pos);
				first =
				    deleteAtPositionInCLL(first, pos);
			}
			break;
		case 3:
			if (first == NULL) {
				printf("CLL is
				       empty\n");
			} else {
				printf("Elements in CLL
				       are: ");
				       traverseListInCLL(first);
			}
			break;
		case 4:
			if (first == NULL) {
				printf("CLL is
				       empty\n");
			} else {
				first =
				    reverseCLL(first);
				printf("CLL
				       reversed\n");
			}
			break;
		case 5:
			exit(0);
		}
	}
}
